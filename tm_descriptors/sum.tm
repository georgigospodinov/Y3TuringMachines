// Binary sum of 2 digits is essentially performing an
// XOR for the first digit
// AND for the second digit
//////////////////////////////////
states 26
// These states keep track of the current sum of the two leftmost digits of w1 and w2.
// If there is a carry, then the carry equivalent states are used.
ReadW1
EmptyW1
SkipW1_0
SkipW1_1
ReadW2_0
ReadW2_1
SkipW2_0
SkipW2_1
Expect0
Expect1
ReturnW3
ReturnW2
ReturnW1
Valid +
Invalid
// Carry equivalent states.///////////
Carry_ReadW1
Carry_EmptyW1
Carry_SkipW1_0
// There is no way to add 1 to a single digit binary number and obtain a sum of 1 and a carry
Carry_ReadW2_0
Carry_SkipW2_0
Carry_SkipW2_1
Carry_Expect0
Carry_Expect1
Carry_ReturnW3
Carry_ReturnW2
Carry_ReturnW1
///////////////////
// Alphabet
alphabet 3 0 1 #
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////
///////////////////////////////////////////
// READ ///////////////////////////////////
///////////////////////////////////////////
// Read one digit from w1. Go into state that reflects the value that has been read.
ReadW1 _ ReadW1 _ R
ReadW1 0 SkipW1_0 _ R
ReadW1 1 SkipW1_1 _ R
Carry_ReadW1 _ Carry_ReadW1 _ R
Carry_ReadW1 0 SkipW1_1 _ R
Carry_ReadW1 1 Carry_SkipW1_0 _ R
// If there are no digits, indicate that w1 is empty
ReadW1 # EmptyW1 # R
Carry_ReadW1 # Carry_EmptyW1 # R
///////////////////////////////////////////
// Read the first digit from w2. Go into state that reflects the sum of the bits.
// Skip dashes (that have been generated by previous iterations).
ReadW2_0 _ ReadW2_0 _ R
ReadW2_1 _ ReadW2_1 _ R
Carry_ReadW2_0 _ Carry_ReadW2_0 _ R
ReadW2_0 0 SkipW2_0 _ R
ReadW2_1 0 SkipW2_1 _ R
ReadW2_0 1 SkipW2_1 _ R
ReadW2_1 1 Carry_SkipW2_0 _ R
Carry_ReadW2_0 0 Carry_SkipW2_0 _ R
Carry_ReadW2_0 1 Carry_SkipW2_1 _ R
// If there are no digits in w2, expect whatever the value from w1 is.
ReadW2_0 # Expect0 # R
ReadW2_1 # Expect1 # R
Carry_ReadW2_0 # Carry_Expect0 # R
///////////////////////////////////////////
///////////////////////////////////////////
// EXPECTATIONS ///////////////////////////
///////////////////////////////////////////
// Skip underscores from previous iterations.
Expect0 _ Expect0 _ R
Expect1 _ Expect1 _ R
Carry_Expect0 _ Carry_Expect0 _ R
Carry_Expect1 _ Carry_Expect1 _ R
// Return once the expected value is found.
Expect0 0 ReturnW3 _ L
Expect1 1 ReturnW3 _ L
Carry_Expect0 0 Carry_ReturnW3 _ L
Carry_Expect1 1 Carry_ReturnW3 _ L
//
///////////////////////////////////
// When w1 is empty, the '#' has already been read, so now
// find the first non-'_' digit of w2.
EmptyW1 _ EmptyW1 _ R
EmptyW1 0 SkipW2_0 _ R
EmptyW1 1 SkipW2_1 _ R
Carry_EmptyW1 _ Carry_EmptyW1 _ R
Carry_EmptyW1 0 SkipW2_1 _ R
Carry_EmptyW1 1 Carry_SkipW2_0 _ R
// If w2 is empty, then w3 should be empty as well.
EmptyW1 # Valid # R
Valid _ Valid _ R
Valid 0 Invalid 0 R
Valid 1 Invalid 1 R
// However, if there is a carry remaining, w3 should have that.
Carry_EmptyW1 # Expect1 # R
///////////////////////////////////////////
///////////////////////////////////////////
// SKIP ///////////////////////////////////
///////////////////////////////////////////
// Skip the rest of w1's digits.
SkipW1_0 0 SkipW1_0 0 R
SkipW1_0 1 SkipW1_0 1 R
SkipW1_1 0 SkipW1_1 0 R
SkipW1_1 1 SkipW1_1 1 R
Carry_SkipW1_0 0 Carry_SkipW1_0 0 R
Carry_SkipW1_0 1 Carry_SkipW1_0 1 R
// Start reading w2 after the first '#'.
SkipW1_0 # ReadW2_0 # R
SkipW1_1 # ReadW2_1 # R
Carry_SkipW1_0 # Carry_ReadW2_0 # R
///////////////////////////////////////////
// Skip the rest of w2's digits.
SkipW2_0 0 SkipW2_0 0 R
SkipW2_0 1 SkipW2_0 1 R
SkipW2_1 0 SkipW2_1 0 R
SkipW2_1 1 SkipW2_1 1 R
Carry_SkipW2_0 0 Carry_SkipW2_0 0 R
Carry_SkipW2_0 1 Carry_SkipW2_0 1 R
Carry_SkipW2_1 0 Carry_SkipW2_1 0 R
Carry_SkipW2_1 1 Carry_SkipW2_1 1 R
// Start Expecting after the '#' character.
SkipW2_0 # Expect0 # R
SkipW2_1 # Expect1 # R
Carry_SkipW2_0 # Carry_Expect0 # R
Carry_SkipW2_1 # Carry_Expect1 # R
///////////////////////////////////////////
///////////////////////////////////////////
// RETURN /////////////////////////////////
///////////////////////////////////////////
ReturnW3 _ ReturnW3 _ L
ReturnW3 # ReturnW2 # L
ReturnW2 0 ReturnW2 0 L
ReturnW2 1 ReturnW2 1 L
ReturnW2 _ ReturnW2 _ L
ReturnW2 # ReturnW1 # L
ReturnW1 0 ReturnW1 0 L
ReturnW1 1 ReturnW1 1 L
Carry_ReturnW3 _ Carry_ReturnW3 _ L
Carry_ReturnW3 # Carry_ReturnW2 # L
Carry_ReturnW2 0 Carry_ReturnW2 0 L
Carry_ReturnW2 1 Carry_ReturnW2 1 L
Carry_ReturnW2 _ Carry_ReturnW2 _ L
Carry_ReturnW2 # Carry_ReturnW1 # L
Carry_ReturnW1 0 Carry_ReturnW1 0 L
Carry_ReturnW1 1 Carry_ReturnW1 1 L
// Last position of w1 with '_'. Now we can re-initiate reading.
ReturnW1 _ ReadW1 _ R
Carry_ReturnW1 _ Carry_ReadW1 _ R